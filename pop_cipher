#/bin/bash

while getopts ":b:s:" opt; do
  case ${opt} in
    b )
      banlist=$OPTARG
      ;;
    s )
      songsfile=$OPTARG
      ;;
    \? )
      echo "Invalid option: $OPTARG" 1>&2
      ;;
    : )
      echo "Invalid option: $OPTARG requires an argument" 1>&2
      ;;
  esac
done
shift $((OPTIND -1))

# input text
text=$1

# clip length in seconds
clip_length=${2:-5}

# custom songs json file, if not, uses the default provided
songs_file=${songsfile:-data.json}

# banlist - list of space-delimited strings
banlist=${banlist:-none}

# run the pop_cipher python script to get the cipher and find the
# spotify preview urls to download
indexes=$(python pop_cipher.py $text --spotify-client-id=$SPOTIFY_CLIENT_ID --spotify-client-secret=$SPOTIFY_CLIENT_SECRET --songs-json-file $songs_file --banlist $banlist | awk '{print "curl ", $1, "> pop_cipher_"NR".mp3 && echo "$2}' | bash | awk '{printf "%s.", $1}')

# generate the outfile name for the final mp3
outfile=$(echo "cipher_"$(echo $indexes)"mp3")
for file in $(find . -name "pop_cipher_*.mp3" | sort -n)
do
    # remove leading ./ from the file name
    f=$(echo $file |sed 's#\./##')
    # trim each mp3 to the specified clip_length
    # then output the raw wav of the mp3
    ffmpeg -y -t $clip_length -i $f -acodec copy clip.$f &&  lame --decode clip.$f -
# concatenate the raw wav output into one mp3
done | lame -a -b 96 - $outfile

# clean up the mess
rm pop_cipher_*.mp3 clip.*mp3

echo "Created clip file: "$outfile
